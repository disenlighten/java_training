* <2021-03-28 Sun>
LinkedIn Learning - Learning Java notes
** Primitive data types
Foundation for other data types in Java
*** Boolean 
True or False
*** Int
whole numbers
*** double
decimal number
*** char
single letter or symbol

** Reference data types
*** String
- Sequence of ordered characters
- Surrounded with quotations
- built out of char type characters

** note: problem with program
for student_representation.java, I could not name the class Main
it suggested that I change it to `public class student_representation` and that was able to compile

** Using strings exercise
#+begin_src java
public class student_representation {
    public static void main(String[] args) {
        int studentAge = 44;
        double studentGPA = 3.45;
        String studentFirstName = "Jamie";
        String studentLastName = "Pemantell";
        char studentFirstInitial = studentFirstName.charAt(0);
        char studentLastInitial = studentLastName.charAt(0);
        boolean hasPerfectAttendance = true;
        
        System.out.println(studentAge);
        System.out.println(studentGPA);
        System.out.println(studentFirstName);
        System.out.println(studentLastName);
        System.out.println(studentFirstInitial);
        System.out.println(studentLastInitial);
        System.out.println(hasPerfectAttendance);
    }
}
#+end_src

** formatting strings
- + for concatentation

#+begin_src java
public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);

    }
}
#+end_src

** Output and Input
*** Scanner is a tool with operations that allows us to get input
- Uses the Scanner data type
- need to import java.util.Scanner to use it

*** input example
#+begin_src java
import java.util.Scanner;

public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);
        System.out.println("What do you want to update it to?");
        
        Scanner input = new Scanner(System.in);
        studentGPA = input.nextDouble();

        System.out.println(studentFirstName + " " + studentLastName + 
        " now has GPA of " + studentGPA);

    }
}
#+end_src

** Control Flow
Order in which the program's instructions are executed
Lines are not necesarily executed sequentially like in the early examples
*** decision blocks/control flow statements
make a decision about what statements to run on each execution
*** relational operators
- like <, >,  ==, >=, >=, != 
- the result is a Boolean - a boolean expressions
*** if-else statement
- if the condition is true, performs some action
- else will be the code that runs if the condition is false

*** example code
#+begin_src java
import java.util.Scanner;

public class fortune_teller {
    public static void main(String[] args) {
        System.out.println("Pick a number between 1 and 10.");
        Scanner scanner = new Scanner(System.in);

        int inputtedNum = scanner.nextInt();

        if (inputtedNum < 5) {
            System.out.println("Enjoy the good luck a fiend brings you");
        } else {
            System.out.println("Your guitar selection will make you very happy today.");

        }
    }
#+end_src

