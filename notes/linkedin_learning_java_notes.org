* <2021-03-28 Sun>
LinkedIn Learning - Learning Java notes
** Primitive data types
Foundation for other data types in Java
*** Boolean 
True or False
*** Int
whole numbers
*** double
decimal number
*** char
single letter or symbol

** Reference data types
*** String
- Sequence of ordered characters
- Surrounded with quotations
- built out of char type characters

** note: problem with program
for student_representation.java, I could not name the class Main
it suggested that I change it to `public class student_representation` and that was able to compile

** Using strings exercise
#+begin_src java
public class student_representation {
    public static void main(String[] args) {
        int studentAge = 44;
        double studentGPA = 3.45;
        String studentFirstName = "Jamie";
        String studentLastName = "Pemantell";
        char studentFirstInitial = studentFirstName.charAt(0);
        char studentLastInitial = studentLastName.charAt(0);
        boolean hasPerfectAttendance = true;
        
        System.out.println(studentAge);
        System.out.println(studentGPA);
        System.out.println(studentFirstName);
        System.out.println(studentLastName);
        System.out.println(studentFirstInitial);
        System.out.println(studentLastInitial);
        System.out.println(hasPerfectAttendance);
    }
}
#+end_src

** formatting strings
- + for concatentation

#+begin_src java
public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);

    }
}
#+end_src

** Output and Input
*** Scanner is a tool with operations that allows us to get input
- Uses the Scanner data type
- need to import java.util.Scanner to use it

*** input example
#+begin_src java
import java.util.Scanner;

public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);
        System.out.println("What do you want to update it to?");
        
        Scanner input = new Scanner(System.in);
        studentGPA = input.nextDouble();

        System.out.println(studentFirstName + " " + studentLastName + 
        " now has GPA of " + studentGPA);

    }
}
#+end_src

** Control Flow
Order in which the program's instructions are executed
Lines are not necesarily executed sequentially like in the early examples
*** decision blocks/control flow statements
make a decision about what statements to run on each execution
*** relational operators
- like <, >,  ==, >=, >=, != 
- the result is a Boolean - a boolean expressions
*** if-else statement
- if the condition is true, performs some action
- else will be the code that runs if the condition is false

*** example code
#+begin_src java
import java.util.Scanner;

public class fortune_teller {
    public static void main(String[] args) {
        System.out.println("Pick a number between 1 and 10.");
        Scanner scanner = new Scanner(System.in);

        int inputtedNum = scanner.nextInt();

        if (inputtedNum < 5) {
            System.out.println("Enjoy the good luck a fiend brings you");
        } else {
            System.out.println("Your guitar selection will make you very happy today.");

        }
    }
#+end_src

*** variable scope
- the region of the program where a piece of code is accessible
- curly braces define a block, the if and else blocks are separate
- Example, a variable defined in the if block cannot be used in the else block
- Variables used outside the if and else blocks can be accessed and assigned a new value within both blocks

*** loops
- code can be executed repeatedly based on a Boolean value
**** the while loop 
- Check the condition, then run code, then check the condition again

** Code Challenge

Single multiple choice question
question + 3 choices, 1 should be correct.

Ask the question, and provide the user possible 
collect user's input 

print out a congratulations message or a message to try again

**** comments have //
**** their solution used a variable instead of a hardcoded value for the correct answer, so I changed my program.
**** their solution also used words instead of letters for the answers and incorporated concatenation
**** I am using their suggestion to use toLowerCase so that the answers are not case-sensitive
** Debugging
*** syntax errors
**** expected ;
**** Cannot resolve symbol
- A misspelled variable
*** logical errors
THe program can run, but does not behave as expected
- You can add print statements to try to see the value of variables at a given point
*** using an IDE
**** breakpoints
- A stop point intentionally put into a program
- Can inspect internal state: variable values, result of lines of code, whether certain code is execute
- Program will pause execution just before the breakpoint
- Step over will run the next line of code
* <2021-04-02 Fri>
*** Debugging Code Challenge
Downloaded from https://github.com/LinkedInLearning/learning-java-2825378/blob/04_03b/src/Main.java
it had a missing ;, changed Main function name to main, and corrected 2 logical errors.

There were supposed to have been 3 errors...
The demonstrated method was using the debugger in the IDE, not the way I did it

* <2021-04-06 Tue>
** Functions
label - name of the function

MyFunctionName();

*** why?
**** organize code in a meaningful way
**** define a given task once


#+begin_src java
import java.util.Scanner;

public class function_test {
    public static void announceDeveloperTeaTime() {
    System.out.println("Waiting for Developer Tea Time.");
    System.out.println("Type in a random word and press enter to start.");
    Scanner input = new Scanner(System.in);
    input.next();
    System.out.println("It's developer tea time.");    
    }
    public static void main(String[] args) {
    announceDeveloperTeaTime();
    }
}
#+end_src

*** calling a function
calling it = using it
will be called in the main function

* <2021-04-09 Fri>
** return types
When you want to get access to the data outputted by a function to do more with it

void in "public static void" is the return type

We will change void to double so that double is the return type

Then, use the return keyword

#+begin_src java
return result;
#+end_src

Can save the answer by assigning to a variable.

** Defined functions in Java
*** Example: println
- We never defined it, but can call it because it's built-in
*** .equals
a string function
an operator
*** finding built-in functions
- search the web
example: pow() function
import Java.lang.Math

** Functions coding challenge
*** Write a function that calculates an employee's salary based on rate/hour, hours/week, + vacation days
#+begin_src java
import java.util.Scanner;

public class employee_salary {
    public static double CalculateEmployeeSalary(int hoursPerWeek, double ratePerHour, int vacationDays) {
        double myResult = ((hoursPerWeek * ratePerHour) * 52) - (vacationDays * (ratePerHour * 8));
        return myResult;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Enter employee's hours per week worked.");
        int hoursPerWeek = input.nextInt();
        System.out.println("Enter employee's rate per hour.");
        double ratePerHour = input.nextDouble();
        System.out.println("Enter employee's number of benefit days.");
        int vacationDays = input.nextInt();
        double myResult = CalculateEmployeeSalary(hoursPerWeek, ratePerHour, vacationDays);
        System.out.println("Employee's annual salary is: $" + myResult);
    }
}
#+end_src

**** I forgot error checking for valid inputs

return -1 if input is less than zero

* <2021-04-10 Sat>

** Had problems adding input checks
# This did not work. Allowed the program to run with a negative value.
#+begin_src java
        if (hoursPerWeek < 0 || ratePerHour < 0 || vacationDays < 0) {
            return -1;
        } 
#+end_src

# This printed the Bogus input message.
#+begin_src java
        if (hoursPerWeek < 0) {
            System.out.println("Bogus input.");
        } 
#+end_src

** Classes
*** readability
*** everything so far has been in the main class
*** Definition
A user-defined blueprint that has a set of attributes and behaviors that define the item that it is supposed to represent
**** Example: A triangle
Has a base, height, and length of three sides
*** Can have behaviors -> methods
functions related to the class
**** findarea() function could be added to the triangle class
findarea() will be a method of the triangle class
**** also could tell what kind of triangle type
TriangleType()
*** Uses or manipulates attributes of a class
*** Keyword static means that function does not use the attributes of the class but still relates to the overall theme or idea of the class
*** Must define a class in order to use it
*** instances
an object created from a class
*** A constructor creates an instance
A special method or behavior inide every class that creates and initializes instances
**** A function that has the same name as the class
***** constructor always returns a return type of the class
#+begin_src java
public Triangle(double base, double height, double sideLenOne, double sideLenTwo, double sideLenThree) {
    this.base = base;
    this.height = height;
    this.sideLenOne = sideLenOne;
    this.sideLenTwo = sideLenTwo;
    this.sideLenThree = sideLenThree;
}
#+end_src
*** will have parametrers for each attribute
*** this keyword
Helps the program make a distinction between the attribute variable and the parameter value
*** new keyword
It gets called like any other function, except we need the new keyword
#+begin_src java
Triangle triangleA = new Triangle(15, 8, 15,  8, 17);
Triangle triangleB = new Triangle(3, 2.598, 3, 3, 3);
#+end_src

*** Triangle is now a data type
* <2021-04-11 Sun>
** Instance Methods vs. Class (Static) Methods
On order to find the area of a given triangle, you must have a triangle instance
This is an instance method

vs.

Static methods like pow() where you do not need to have an instance

*** charAt
dot operator was used on a string instance, so this is an instance method

** Instance and class variables
*** Base and height are non-static variables - they vary based on the triangle instance
*** Static variables are things that do not change per instance, like the number of sides in a variable
**** accessed via the dor operator

** Class review
attributes -> properties -> variable
behaviors -> methods -> function

** Classes code challenge
A colleage student's profile
Should have at least:
First
Last 
Expected year to graduate
GPA
Declared Major

The class should have at least 1 behavior
- Increment the year by 1

Have a constructor that initializes the values

Create 2 student profiles that represent 2 students
on one of the students, use the increment year function

*** Solution to coding challenge
**** She created the method slightly differently
#+begin_src java
public void incrementExpectedGraduationYear() {
    this.expectedYeartoGraduate = this.expectedYeartoGraduate + 1
}
#+end_src

**** MySolution
# MyStudentModel.java
#+begin_src java
public class myStudentModel {

    String firstName;
    String lastName;
    double studentGPA;
    int expectedGraduationYear;
    String studentMajor;
    
    public myStudentModel(String firstName,
    String lastName, double studentGPA,
    int expectedGraduationYear,
    String studentMajor) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.studentGPA = studentGPA;
    this.expectedGraduationYear = expectedGraduationYear;
    this.studentMajor = studentMajor;
    }

    public int incrementYear() {
        return this.expectedGraduationYear + 1;
    }

}
#+end_src

# student_model_with_classes.java
#+begin_src java
public class student_model_with_classes {

    public static void main(String[] args) {
    
    myStudentModel student1 = new myStudentModel("Pagoda", "Lawrence", 3.25, 2024, "Animal Photography");
    myStudentModel student2 = new myStudentModel("Rafiki", "Londray", 4.00, 2023, "Surveillance Science");
    
    System.out.println(student1.firstName);

    student2.expectedGraduationYear = student2.incrementYear();

    System.out.println("STUDENT REPORT");
    System.out.println("Name: " + student1.firstName + " " + student1.lastName);
    System.out.println("GPA: " + student1.studentGPA);
    System.out.println("Expected Graduation Year: " + student1.expectedGraduationYear);
    System.out.println("Major:  " + student1.studentMajor);
    System.out.println("Name: " + student2.firstName + " " + student2.lastName);
    System.out.println("GPA: " + student2.studentGPA);
    System.out.println("Expected Graduation Year: " + student2.expectedGraduationYear);
    System.out.println("Major:  " + student2.studentMajor);

    }


}

#+end_src

** Next steps for Learning Java
*** Java 11+ Essential Training
*** Java Code Clinic
*** Programming Foundations: Data Structures

