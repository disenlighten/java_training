* <2021-03-28 Sun>
LinkedIn Learning - Learning Java notes
** Primitive data types
Foundation for other data types in Java
*** Boolean 
True or False
*** Int
whole numbers
*** double
decimal number
*** char
single letter or symbol

** Reference data types
*** String
- Sequence of ordered characters
- Surrounded with quotations
- built out of char type characters

** note: problem with program
for student_representation.java, I could not name the class Main
it suggested that I change it to `public class student_representation` and that was able to compile

** Using strings exercise
#+begin_src java
public class student_representation {
    public static void main(String[] args) {
        int studentAge = 44;
        double studentGPA = 3.45;
        String studentFirstName = "Jamie";
        String studentLastName = "Pemantell";
        char studentFirstInitial = studentFirstName.charAt(0);
        char studentLastInitial = studentLastName.charAt(0);
        boolean hasPerfectAttendance = true;
        
        System.out.println(studentAge);
        System.out.println(studentGPA);
        System.out.println(studentFirstName);
        System.out.println(studentLastName);
        System.out.println(studentFirstInitial);
        System.out.println(studentLastInitial);
        System.out.println(hasPerfectAttendance);
    }
}
#+end_src

** formatting strings
- + for concatentation

#+begin_src java
public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);

    }
}
#+end_src

** Output and Input
*** Scanner is a tool with operations that allows us to get input
- Uses the Scanner data type
- need to import java.util.Scanner to use it

*** input example
#+begin_src java
import java.util.Scanner;

public class string_formatting {
    public static void main(String[] args) {
        double studentGPA = 3.45;
        String studentFirstName = "Jamie"; 
        String studentLastName = "Pemantell";
        System.out.println(studentFirstName + " " + studentLastName + " has a GPA of " + studentGPA);
        System.out.println("What do you want to update it to?");
        
        Scanner input = new Scanner(System.in);
        studentGPA = input.nextDouble();

        System.out.println(studentFirstName + " " + studentLastName + 
        " now has GPA of " + studentGPA);

    }
}
#+end_src

** Control Flow
Order in which the program's instructions are executed
Lines are not necesarily executed sequentially like in the early examples
*** decision blocks/control flow statements
make a decision about what statements to run on each execution
*** relational operators
- like <, >,  ==, >=, >=, != 
- the result is a Boolean - a boolean expressions
*** if-else statement
- if the condition is true, performs some action
- else will be the code that runs if the condition is false

*** example code
#+begin_src java
import java.util.Scanner;

public class fortune_teller {
    public static void main(String[] args) {
        System.out.println("Pick a number between 1 and 10.");
        Scanner scanner = new Scanner(System.in);

        int inputtedNum = scanner.nextInt();

        if (inputtedNum < 5) {
            System.out.println("Enjoy the good luck a fiend brings you");
        } else {
            System.out.println("Your guitar selection will make you very happy today.");

        }
    }
#+end_src

*** variable scope
- the region of the program where a piece of code is accessible
- curly braces define a block, the if and else blocks are separate
- Example, a variable defined in the if block cannot be used in the else block
- Variables used outside the if and else blocks can be accessed and assigned a new value within both blocks

*** loops
- code can be executed repeatedly based on a Boolean value
**** the while loop 
- Check the condition, then run code, then check the condition again

** Code Challenge

Single multiple choice question
question + 3 choices, 1 should be correct.

Ask the question, and provide the user possible 
collect user's input 

print out a congratulations message or a message to try again

**** comments have //
**** their solution used a variable instead of a hardcoded value for the correct answer, so I changed my program.
**** their solution also used words instead of letters for the answers and incorporated concatenation
**** I am using their suggestion to use toLowerCase so that the answers are not case-sensitive
** Debugging
*** syntax errors
**** expected ;
**** Cannot resolve symbol
- A misspelled variable
*** logical errors
THe program can run, but does not behave as expected
- You can add print statements to try to see the value of variables at a given point
*** using an IDE
**** breakpoints
- A stop point intentionally put into a program
- Can inspect internal state: variable values, result of lines of code, whether certain code is execute
- Program will pause execution just before the breakpoint
- Step over will run the next line of code
* <2021-04-02 Fri>
*** Debugging Code Challenge
Downloaded from https://github.com/LinkedInLearning/learning-java-2825378/blob/04_03b/src/Main.java
it had a missing ;, changed Main function name to main, and corrected 2 logical errors.

There were supposed to have been 3 errors...
The demonstrated method was using the debugger in the IDE, not the way I did it

* <2021-04-06 Tue>
** Functions
label - name of the function

MyFunctionName();

*** why?
**** organize code in a meaningful way
**** define a given task once


#+begin_src java
import java.util.Scanner;

public class function_test {
    public static void announceDeveloperTeaTime() {
    System.out.println("Waiting for Developer Tea Time.");
    System.out.println("Type in a random word and press enter to start.");
    Scanner input = new Scanner(System.in);
    input.next();
    System.out.println("It's developer tea time.");    
    }
    public static void main(String[] args) {
    announceDeveloperTeaTime();
    }
}
#+end_src

*** calling a function
calling it = using it
will be called in the main function

